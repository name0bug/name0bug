进程管理
    进程 -  正在运行的程序
    PID     进程唯一标识符 (是16位正整数 0-65535)

    软件 -> 至少有一个程序 -> 至少有一个进程 -> 至少有一个线程

    ELF可执行文件主要分段:
        BSS         存储未初始化全局变量
        DATA        存储初始化的全局变量
        RODATA      存储常量
        TEXT        存储指令集


    进程独立虚拟内存空间, 实现进程间隔离

    进程之间通讯(内核提供) IPC
        信号            异常通知
        管道            数据通信(基于I/O)
        套接字          数据通信(多应用于网络 协议)
        消息队列        数据通信(队列)
        共享内存        数据通信(将虚拟地址映射同一块物理地址)
        信号量(信号灯)  并发处理

    进程和线程
        进程独立内存空间, 会产生进程间通讯
        线程独立栈空间, 依赖进程空间

-------------------------------------------------------------------------------
进程列表命令
    top     文本任务管理器
        ?       帮助
        q       退出
        k       结束进程
        空格    实时刷新

        ...

        截取两帧数据到top.txt文件中
            top -d 0.5 -b -n 2 > /tmp/top.txt


    ps      列表进程
        ps          列出当前终端运行的程序
        ps -aux     列出所有进程信息(BSD)
        ps -ef      列出所有进程信息
        ps -e -o pid,comm       自定义显示字段
        ...

    pstree  打印进程树
        pstree -p   带PID的进程树

    pgrep   按进程名查找进程
        pgrep vim
        pgrep -u kyo vim

-------------------------------------------------------------------------------
进程控制(信号机制的发信号)
    信号源
        kill -l

    终止操作
        kill -15 PID

    杀死进程
        kill -9 PID

    捕捉信号
        trap 操作 信号源

        9和19不能捕捉

    通过进程名杀死进程
        杀死进程名带有关键词的进程
            pkill -9 关键词

        杀死对应进程名的进程
            pkill -9 -x 进程名

        杀死对应root用户的所有进程
            pkill -u root

-------------------------------------------------------------------------------
进程状态
    R       运行状态
    S       睡眠状态
    D       不可中断睡眠状态
    Z       僵尸进程

    孤儿进程
        父进程先结束， 子进程就会变成孤儿进程，被进程管理者收养

    僵尸进程
        子进程先结束， 父进程没有结束, 父进程对其没有任何操作, 子进程变成僵尸进程
            子进程要给父进程返回进程状态

        杀死僵尸进程， 只需要将僵尸进程父进程干掉就可以了

-------------------------------------------------------------------------------
进程优先级
    进程优先级范围: -20 到 19, 数值越小, 优先级越高
    普通用户只能将进程优先级数值调大， 不能调小

    查看进程优先级: ps -el / top / ps -eo pid,ni,comm

    nice        指定运行程序的进程优先级
        nince -n 19 tar -xf mysql.tar.bz2

    renice      更改正在运行程序的进程优先级
        renice -19 PID

    占用cpu一个核心: nice -n 0 cat /dev/urandom > /dev/null

    查看进程优先级设置的变化: time nice -n -20 head -c 1m /dev/urandom > /dev/null

-------------------------------------------------------------------------------
进程组
    进程组包含一个或多个进程, 用于进程分组, 方便管理进程
    每个进程都会所属一个进程组, 默认与父进程同属一个组

    进程组也有唯一标识符(pgrp), 进程组组长PID即是进程组ID
    创建进程组的人即是进程组组长, 进程组组长不能再创建进程组

    由于进程组ID与进程组组长的PID一致，操作组长进程直接操作PID即可, 操作进程组在PID前面加负号

        给进程组长发信号:   kill -9 1023
        给进程组发信号:     kill -9 -1023
        给本进程组发信号:   kill -9 0
        给所有进程发信号:   kill -9 -1

-------------------------------------------------------------------------------
会话
    一个会话包含一个进程组或多个进程组
    一个会话对应一个控制终端(输入输出)
    一个会话包含进程组分为前台进程组和后台进程组
    使用控制终端的进程组即是前台进程组， 其它全为后台进程组
    会话与进程组一样，都唯一标识符， 也有管理者(会长)
    进程组组长不能创建会话

    作业管理
        ps          查看当前会话所有进程组

        jobs        查看当前会话的所有后台进程组(任务)
            jobs -l 列表后台进程组带PID显示

        ctrl + z    将前台进程组切换到后台停止

        gedit &     将gedit进程切换到后台

        fg          将后台进程组切换到前台运行(默认将最后的后台进程组调到前台)
            fg 2    将ID为2的后台进程组调到前台运行

        bg          将后台进程组停止状态改为运行状态
            bg 2    将jobs列表ID对应2的后台进程组停止状态改为运行状态

-------------------------------------------------------------------------------
管道
    用于两个进程单向数据通信
    必须读写端同时存在, 数据写入管道被读之后, 数据在管道内就不存在

    创建管道文件
        mkfifo 管道文件路径
        例:
            mkfifo play

    播放多媒体文件支持管道控制
        mplayer fa.wmv -quiet -slave -input file=./play

    获取mplayer支持的管道控制命令列表
        mplayer -input cmdlist

    往管道里发送指令可以控制mplayer
        echo p > ./play

-------------------------------------------------------------------------------
shell高并发
shell信号处理

作业:
    编写杀死僵尸进程的脚本
        kill -9 $(ps -eo pid,ppid,stat | egrep "\<Z" | awk '{print $2}') &> /dev/null

    编写检测本网络所有能通的IP
        mping() {
            local save_file=/tmp/
            ping -c 2 $1 &> /dev/null && save_file+=ip.list || save_file+=err.list
            echo $1 >> $save_file
        }

        for ip in 3.3.3.{1..254}; do
            mping $ip &
        done

    将/etc/下所有conf后缀文件复制到/tmp/test/目录下
        find /etc -name "*.conf" | xargs cp -t /tmp/test
            或
        cp -t /tmp/test $(find /etc/ -name "*.conf")


    将/usr/share/doc下所有index.html文件复制到/tmp/index/目录下, 按查找顺序先后更名为index.html.1, index.html.2...，以此类推


    处理以下文件内容，将域名取出并进行读数排序，如处理：
        http://www.baidu.com/index.html
        http://www.baidu.com/1.html
        http://post.baidu.com/index.html
        http://mp3.baidu.com/index.html
        http://www.baidu.com/3.html
        http://post.baidu.com/2.html

    得到如下结果

        域名的出现次数

            3 www.baidu.com
            2 post.baidu.com
            1 mp3.baidu.com
