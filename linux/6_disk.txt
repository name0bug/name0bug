磁盘管理
    存储设备(块设备)的管理(硬盘 移动硬盘 U盘 光盘 软盘 阵列...)

    块设备操作流程: 分区 格式化(文件系统格式) 挂载

    查看磁盘信息
        fdisk -l
            设备文件 /dev/sda
                sda     主机的第一块SATA硬盘
                    s       硬盘类型(硬盘接口: SATA IDE)
                        SATA,U盘,移动硬盘          s
                        IDE                         h
                    d       存储设备
                    a       第一个块同类型的硬盘

                sdb     主机的第二块SATA硬盘
                hda     主机的第一块IDE硬盘

                sda1    主机的第一块SATA硬盘的第一个分区
                sda2    主机的第一块SATA硬盘的第二个分区

            分区表 (MBR/GPT)
                BIOS -> MBR -> fdisk(mbr分区管理工具)
                UEFI -> GPT -> gdisk(gpt分区管理工具)

                MBR     分区表规则
                    硬盘的第一个逻辑块(扇区)用于存储MBR信息(512字节)
                    MBR(512) = 分区表(64) + 启动代码

                    分区表(64字节)
                        一个分区信息占16字节, 最后可分4个分区, 称为主分区
                        扩展分区, 占用一个主分区位，用于扩展分区信息
                        逻辑分区, 在扩展分区内再继续划分的分区

            个人分区方案(MBR)
                第一个主分区    50G     windows C盘
                第二个主分区    50G     黑苹果系统分区
                第三个主分区    4G      boot分区
                第四个主分区    扩展分区
                第一个逻辑分区  4G      交换分区
                第二个逻辑分区  50G     linux的家目录(/home) 个人数据存储
                第三个逻辑分区  30G     主linux系统的根分区(ubuntu)
                第四个逻辑分区  20G     从linux系统的根分区(centos)
                第五个逻辑分区  20G     测试linux系统的根分区
                ...
                最后一个逻辑分区    剩于空间    windows D盘

            个人分区方案(GPT)
                第一个分区  4G      ESP分区(boot分区)
                第二个分区  1M      兼容分区(BIOS)
                第三个分区  50G     windows 7 C盘
                第四个分区  4G      交换分区
                第五个分区  50G     linux的家目录(/home) 个人数据存储
                第六个分区  30G     主linux系统的根分区(ubuntu)
                第七个分区  20G     从linux系统的根分区(centos)
                第八个分区  20G     测试linux系统的根分区
                ...
                最后一个逻辑分区    剩于空间    windows D盘

            个人分区方案(GPT + LVM)
                第一个分区  4G      ESP分区(boot分区)
                第二个分区  1M      兼容分区(BIOS)
                第三个分区  50G     windows 7 C盘
                第四个分区  100G    LVM


        教学环境分区方案(作业一)
            第一个分区  30G     ubuntu根分区        83
            第二个分区  30G     windows C盘         7
            第三个分区  4G      boot分区            83
            第四个分区  扩展分区
            第一个逻辑分区      4G      交换分区    82
            第二个逻辑分区      50G     /home       83
            第三个逻辑分区      30G     centos      83
            第四个逻辑分区      20G     mint        83
            ...
            最后逻辑分区    剩于空间    windows D盘 7

    分区管理
        sudo fdisk /dev/sda
            进入分区管理的交互界面
            m       获取帮助
            p       打印分区表
            d       删除分区
            q       退出
            w       写入mbr
            n       新建分区
                询问扩展分区(e)还是主分区(p)  (还有主分区位才会询问)
                    选择扩展分区才要将剩于空间全部占完
                询问占用主分区位(必须选择默认值)
                访问新建分区的起始逻辑块(必须选择默认值)
                访问新建分区的结束逻辑块, 标识此分区的大小, 建议: +30G

            t       修改分区类型
                询问修改哪个分区的类型
                询问修改哪个类型 (L 可以查找分区类型, 再输入对应ID)

        保存分区表之后，设备文件并没有对应生成, 生成对应的设备文件:
            方法一: reboot
            方法二: partprobe

    分区格式化 mkfs
        格式化boot分区:
            mkfs -t ext2 /dev/sda3

        格式化windows C盘
            mkfs.ntfs /dev/sda2 (很慢)
                或
            mkfs.vfat /dev/sda2

        格式化home分区
            mkfs.ext4 /dev/sda6

    挂载 mount
        查看当前挂载情况
            mount
                挂载源 on 挂载目标 type 挂载类型 (挂载选项)

        命令选项
            -t      指定挂载文件系统类型, 自动识别(可以省略)
            -o      指定挂载选项(因为有默认选项, 所以也可省略)

        挂载选项 (挂载选项可写多个，以逗号分隔)
            ro          只读
            rw          可读可写(默认)
            remount     重新挂载
            bind        绑定目录
            loop        使用loop块设备
            noauto      不开机自动挂载

        挂载
            将ext2文件系统格式分区挂载到/disk/boot
                mount -t ext2 -o rw /dev/sda3 /disk/boot

            将vfat文件系统格式分区挂载到/disk/C
                mount -t vfat /dev/sda2 /disk/C

            将ntfs文件系统格式分区挂载到/disk/D
                mount.ntfs-3g /dev/sda9 /disk/D

            将网络文件系统挂载到/mnt
                mount -t nfs 3.3.3.9:/kyo /mnt

            将iso镜像文件挂载到/mnt
                mount -t iso9660 -o loop,ro /centos.iso /mnt

            将/kyo绑定到/mnt(访问/mnt即访问/kyo)
                mount -o bind /kyo /mnt

            重新挂载
                mount -o remount,rw /dev/sda1
                    或
                mount -o remount,rw /

        取消挂载
            umount /mnt
            umount /dev/sda3

            强制取消挂载
                umount -l /mnt

    交换分区
        查看内存和交换分区的使用量
            free -m

        停用交换分区
            swapoff /dev/sda5

        启用交换分区
            swapon /dev/sda5

        格式化交换分区
            mkswap /dev/sda5


    开机自动挂载配置文件 /etc/fstab

        UUID=db6a4392-ccb0-41af-863f-4de76cad1c0a /    ext4  errors=remount-ro 0  1
        UUID=67a2f488-1421-495a-ada1-dc022c29d77d none swap  sw                0  0

        挂载源 挂载目标 文件系统格式 挂载选项 dump备份 开机自检
        UUID=96A4-6194 /disk/C vfat defaults 0 0
        UUID=51c35f8c-c9dd-498e-9f05-203d6f931fa6 /disk/boot ext2 defaults 0 0
        UUID=c9edda7d-dbc2-443a-81a4-5a729fc9b27a none swap sw 0 0
        3.3.3.9:/kyo /mnt nfs defaults,noauto 0 0
        /disk/ubuntu-16.04.4-server-amd64.iso /opt iso9660 loop,ro 0 0

        挂载/etc/fstab配置里所有挂载条目: mount -a

        UUID: 分区唯一标识符
            设备名称会因硬盘变动而发生改变(删除中间分区 添加硬盘等)
            分区只要不格式化， 此分区UUID绝对唯一， 不会冲突

            查看块设备的UUID: blkid


    查看已挂载磁盘使用情况:  df -h
    树型结构查看所有硬盘分区表: lsblk

-------------------------------------------------------------------------------
    生成指定大小的空文件
        head -c 1G /dev/zero > swapfile

        dd if=/dev/zero of=./swapfile bs=1024 count=1024

    加密分区
        安装: sudo apt install cryptsetup -y

        创建加密分区
            sudo cryptsetup luksFormat /dev/sda6
                输入加密分区的密码, 不能忘记，忘记的话加密分区就无法再访问

        解密分区 (生成解密后的设备文件)
            sudo cryptsetup luksOpen /dev/sda6 kyo
                输入加密分区的密码
                这里的kyo为自定义

        首次使用先格式化加密后的分区
            sudo mkfs -t ext4 /dev/mapper/kyo

        挂载加密分区
            sudo mount /dev/mapper/kyo /mnt

        对/mnt进行操作即是对加密分区进行操作


        取消挂载的加密分区
            sudo umount /dev/mapper/kyo

        取消解密分区(释放解密后的设备文件)
            sudo cryptsetup luksClose kyo

-------------------------------------------------------------------------------
LVM
    LVM是Linux下对磁盘空间管理的一种方法(动态扩容/缩减空间)

    安装LVM:
        sudo apt install lvm2 -y

    物理卷(PV)  对应硬盘分区 块设备
        创建    pvcreate
            pvcreate /dev/sda7
        查看    pvs pvscan pvdisplay
        删除    pvremove
        更改    pvchange

    卷组(VG)    用于管理物理卷
        创建    vgcreate
            vgcreate 卷组名 物理卷设备路径...
        查看    vgs vgscan vgdisplay
        删除    vgremove
        更改    vgchange vgextend
            扩容卷组(增加物理卷)
                sudo vgextend centos /dev/sda8

            缩减卷组(减少物理卷)
                sudo vgreduce centos /dev/sda8

    逻辑卷(LV)  在卷组之上划分分区
        创建    lvcreate
            lvcreate --name 逻辑卷名 --size 10G 卷组名
        查看    lvs lvscan lvdisplay
        删除    lvremove
        更改    lvchange lvextend

        扩容(lvextend)
            第一步: 给home逻辑卷加10G空间
                lvresize -L +10G /dev/centos/home

            第二步: 扩大文件系统的显示
                resize2fs /dev/centos/home

            两步可以合成一步完成:
                lvresize -r -L +10G /dev/centos/home

        缩减 (lvreduce)
            必须先取消挂载, 并且缩减剩于空间足够

                lvresize -r -L -10G /dev/centos/mnt

-------------------------------------------------------------------------------
    作业二: 使用lvm重新分区
        第一个分区  30G     ubuntu根分区        83
        第二个分区  30G     windows C盘         7
        第三个分区  4G      boot分区            83
        第四个分区  扩展分区
        第一个逻辑分区      200G    LVM (卷组: up)
            第一个逻辑卷      4G      swap
            第二个逻辑卷      50G     home
            第三个逻辑卷      30G     centos
            第四个逻辑卷      20G     mint
        第五个逻辑分区      20G    用于临时存储(安装系统使用) ext2
        第六个逻辑分区      100G    windows D盘 7  vfat

-------------------------------------------------------------------------------
作业
    编写自动挂载/取消挂载加密分区的脚本
        脚本名: mycrypt.sh
            已知加密分区的UUID

            打开加密分区:
                ./mycrypt.sh [挂载路径, 默认为/mnt]

            关闭加密分区:
                ./mycrypt.sh close

    编写根据分区方案自动分区

