常用的ftp 客户端工具：ftp, lftp


命令ftp 的常用操作：

[czl@mob ~]$ ftp 10.1.1.1           <-- 连接ftp 服务器
Connected to 10.1.1.1 (10.1.1.1).
220 (vsFTPd 2.2.2)
Name (10.1.1.1:czl): ftp            <-- 输入用户名，ftp 代表匿名用户
331 Please specify the password.
Password:                           <-- 输入密码，匿名用户的话就直接按Enter用空密码登录
230 Login successful.
Remote system type is UNIX.
Using binary mode to transfer files.
ftp>                                <-- 登录成功，可以输入ftp 命令了
ftp> ls                             <-- 列目录
227 Entering Passive Mode (10,1,1,1,130,25).
150 Here comes the directory listing.
drwxrwxrwx    2 0        0            4096 Jul 15 14:29 upload
226 Directory send OK.
ftp> cd upload                      <-- 进入名为upload 的目录（远程机的目录）
250 Directory successfully changed.
ftp> binary                         <-- 使用二进制的传输方式（推荐使用）
200 Switching to Binary mode.
ftp> put /bin/bash bash1            <-- 把本地的文件/bin/bash 上传到远程机上的当前目录，在远程机上改名为bash1
local: /bin/bash remote: bash1
227 Entering Passive Mode (10,1,1,1,130,25).
150 Ok to send data.
226 Transfer complete.
938736 bytes sent in 0.0015 secs (625824.00 Kbytes/sec)
ftp> passive                        <-- passive 命令是一个开关命令，可以在主动传输模式和被动传输模式之间切换
Passive mode off.
ftp> get bash1              
local: bash1 remote: bash1
200 PORT command successful. Consider using PASV.
550 Failed to open file.            <-- 出错信息
ftp> ls
200 PORT command successful. Consider using PASV.
150 Here comes the directory listing.
-r-xr-xr-x    1 0        0          938736 Jul 10 03:54 bash
-rw-------    1 99       50         938736 Jul 16 23:16 bash1
-rw-------    1 0        50         938736 Jul 15 14:23 bash10
-r--r--r--    1 14       50         938736 Jul 15 14:26 bash11
-r--r--r--    1 14       50         938736 Jul 15 14:28 bash12
-rw-------    1 99       50         938736 Jul 15 14:29 bash13
-rw-------    1 0        50         938736 Jul 15 14:05 bash2
-rw-------    1 0        50         938736 Jul 15 14:06 bash3
-rw-------    1 0        50         938736 Jul 15 14:11 bash4
-rw-------    1 0        50         938736 Jul 15 14:12 bash5
-rw-------    1 0        50         938736 Jul 15 14:18 bash6
-rw-------    1 0        50         938736 Jul 15 14:19 bash7
-rw-------    1 0        50         938736 Jul 15 14:20 bash8
-rw-------    1 0        50         938736 Jul 15 14:22 bash9
226 Directory send OK.
ftp> get bash12                     <-- 下载远程机当前目录下的文件bash12，放到本地的当前目录
local: bash12 remote: bash12
200 PORT command successful. Consider using PASV.
150 Opening BINARY mode data connection for bash12 (938736 bytes).
226 Transfer complete.
938736 bytes received in 0.113 secs (8284.23 Kbytes/sec)
ftp> help                           <-- 列出可用的命令
Commands may be abbreviated.  Commands are:

!        debug       mdir     sendport  site
$        dir         mget     put       size
account  disconnect  mkdir    pwd       status
append   exit        mls      quit      struct
ascii    form        mode     quote     system
bell     get         modtime  recv      sunique
binary   glob        mput     reget     tenex
bye      hash        newer    rstatus   tick
case     help        nmap     rhelp     trace
cd       idle        nlist    rename    type
cdup     image       ntrans   reset     user
chmod    lcd         open     restart   umask
close    ls          prompt   rmdir     verbose
cr       macdef      passive  runique   ?
delete   mdelete     proxy    send
ftp> help lcd                       <-- 查看某个命令的帮助信息
lcd         change local working directory
ftp> pwd                            <-- 打印出远程机上的当前工作目录
257 "/upload"
ftp> lcd /tmp                       <-- 改变本地的当前工作目录
Local directory now /tmp
ftp> lcd
Local directory now /tmp
ftp> lcd                            <-- 不带参数的lcd 打印出本地的当前工作目录
Local directory now /tmp
ftp> debug 1                        <-- 开启调试
Debugging on (debug=1).
ftp> get bash12 newbash             <-- 下载远程机上当前目录的bash12，放在本地的当前目录，改名为newbash
local: newbash remote: bash12
ftp: setsockopt (ignored): Permission denied
---> PORT 10,1,1,1,162,24
200 PORT command successful. Consider using PASV.
---> RETR bash12
150 Opening BINARY mode data connection for bash12 (938736 bytes).
226 Transfer complete.
938736 bytes received in 0.0028 secs (334784.61 Kbytes/sec)
ftp> exit                           <-- 命令exit 退出ftp 连接，快捷键Ctrl+D 也可以
---> QUIT
221 Goodbye.
[czl@mob ~]$ 











ftp 有两种模式，都是针对数据传输来说的，而且是从服务器的角度来说的：
1. 主动模式：客户端提供一个端口用来传输数据，然后服务器发起连接（服务器[主动]）
2. 被动模式：服务器提供一个端口用来传输数据，然后客户端发起连接（服务器[被动]）



ftp 的端口
1. 命令端口，默认是21
2. 数据传输端口，受数据传输模式影响，默认情况下，被动模式下，两端都是随机端口，主动模式下，服务器使用20端口，客户端使用随机端口



安装vsftpd 服务器
yum install vsftpd


vsftpd 的配置参数可参考man 文档 vsftpd.conf(5)
anonymous_enable=YES                <-- 启用匿名登录
local_enable=YES                    <-- 启用本地用户登录，本地用户就是ftp服务器的系统用户
write_enable=YES                    <-- 写操作的总开关
local_umask=022                     <-- 本地用户创建文件时使用的umask
anon_umask=0222                     <-- 匿名用户创建文件时使用的umask
anon_upload_enable=YES              <-- 是否允许匿名用户上传
anon_mkdir_write_enable=YES         <-- 是否允许匿名用户创建目录
chown_uploads=YES                   <-- 是否修改匿名用户上传的文件的所有者
                                        这样修改后匿名用户上传的文件的
                                        权限将会受chown_upload_mode
                                        选项的影响，此选项与chown_username配合
# chown_username=nobody               <-- 与chown_uploads 配合，指定新的所有者的用户名
chroot_local_user=YES               <-- 把本地用户限制在其初始目录里
local_root=/ftp                     <-- 定义本地用户的初始目录

userlist_enable=YES                 <-- 启用用户名单
userlist_deny=no                    <-- 定义用户名单的类型（白名单，黑名单）
pasv_min_port=33301                 <-- 被动模式的最小端口
pasv_max_port=33310                 <-- 被动模式的最大端口
anon_max_rate=102400                <-- 限制匿名用户的最大传输速率，单位是字节
local_max_rate=102400               <-- 限制本地用户的最大传输速率，单位是字节
max_clients=1000                    <-- 最多允许多少个并发连接
max_per_ip=10                       <-- 每个IP 的最大连接数



 
配置白名单/黑名单
userlist_enable     <-- 启用名单
userlist_file       <-- 名单数据
userlist_deny       <-- 关键的参数，设为YES 就是黑名单（默认），设为NO就是白名单


允许root用户登录
1. 注释ftpusers 文件中的root那一行
2. 如果启用了黑名单，就要确保root不在黑名单中，如果启用了白名单，就要确保root在白名单中


限速和限连接数
anon_max_rate
local_max_rate
max_clients
max_per_ip

可以用wget来检测ftp的下载速度
wget ftp://10.1.1.1/pub/50m
wget ftp://u9:abc@10.1.1.1/50m









用tcpwrapper 来限制连接ftp的客户端

如何确定某个服务是否支持tcpwrapper？
ldd /usr/sbin/vsftpd | grep wrap

/etc/hosts.allow
/etc/hosts.deny

语法：
vsftpd: 10.1.1.15,10.1.1.96,10.1.1.0/255.255.255.0
  |                         |
  |                         |
  v                         v
服务的进程名字        客户端的地址



程序按以下顺序查找两个文件，找到第一个匹配的规则后就不再往下查找：
1. 如果在/etc/hosts.allow 中，则允许
2. 如果在/etc/hosts.deny中，则拒绝
3. 如果都不在两个文件中，则允许

如果以上两个文件不存在，就当作文件为空，即允许。


关于hosts.allow 和 hosts.deny 这两个文件的配置方法，可参考man 文档：
man 5 hosts_options
man 5 hosts_access




iptables -A INPUT [OPTIONS]... -j ACCEPT
iptables -A INPUT [OPTIONS]... -j REJECT
iptables -P INPUT DROP



查看服务器上与客户端交互的ftp进程


1. 找出自己的进程号
    ps -C ftp       <-- 找出了10292

2. 根据进程号找出自己的端口号
    netstat -tpn | grep 10292   <-- 找到了 3.3.3.7:34330

3. 在服务器上，根据远程端口号和ip地址，找出服务器上对应的进程
    netstat -tpn | grep 3.3.3.7:34330   <-- 找到了 8161

4. 查看该进程的euid
    ps -o pid,euid -p 8161      <-- 找到了nobody，发现不是ftp，原因确认
