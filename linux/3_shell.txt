SHELL编程

    编程语言
        机器语言                01010101
        低级语言(汇编语言)      助记词(转义器 将助记词编译成机器语言)
        高级语言                跨平台
            编译型(编译器)      将标准文档转成对应平台的汇编
                C / C++

            解析型(解析器)      将文档实时转义成平台指令
                Shell PHP Python JavaScript

            编译解析型(编译器/虚拟机)
                Java C# PHP Python JS

    编程入口
        编辑文档, 文档的第一行开始，逐行解析

    SHELL解析器     /bin/bash
        快捷键
            快捷键模式
                emacs       默认
                    ctrl + a
                    ctrl + e
                    ctrl + d
                    ...
                vi

                临时更换模式: set -o vi

            tab键补全

        特殊符号
            *           通配符
            \           转义符, 去除后面字符的特殊意义
            ""          批量转义符, 去除引号引起来的内容大部分特殊字符的特殊意义
            ''          批量完成转义符, 去除引号引起来的内容所有特殊字符的特殊意义
            ``          引起来内容当作shell命令去执行并且将执行标准输出替换, 尽量使用$()
                        $()可以嵌套， 反引号不能嵌套
                        ``和$()都是开新进程去执行

            {}          展开，代表多个的意思
            ()          子程序
            &           将程序放入后台执行(多进程)
            !           命令历史特殊符号
            ~           当前登录用户的家目录
            /           根
            #           注释符
            -           选项(标准输入)
            $           组合使用， 访问变量
            |           管道
            < > >>..    重定向
            .           当前目录
            ..          上一级目录
            [  ]        判断表达式
            :           永真(if while)
            ;           一条命令的结束
            &&          逻辑与
            ||          逻辑或

        命令历史
            查看命令历史
                history
                history 10

            存储命令历史
                history -w /tmp/history.txt

            读取命令历史
                history -r /tmp/history.txt

            删除命令历史
                history -c

            执行命令执行
                执行最后一条命令历史
                    !!

                执行109的命令
                    !109

                执行root开头的命令
                    !root

                获取最后一条命令历史的最后一个参数
                    !$

            命令历史的环境变量
                HISTFILE        控制命令历史默认写入的文件(~/.bash_history)
                HISTFILESIZE    控制命令历史写入文件的最大条目
                HISTSIZE        控制命令历史最大条目数
                HISTTIMEFORMAT  控制命令历史时间显示格式
                    export HISTTIMEFORMAT="%F %T "

        命令别名 alias
            简化命令的输入, 只影响当前终端

            创建命令别名
                格式: alias 别名='执行命令名字及参数'
                例:
                    alias i='ifconfig enp0s25'
                    alias p='ping -c 3 3.3.3.9'

            删除命令别名
                格式: unalias 别名

            查看命令别名
                alias

        环境变量
            提升程序运行效率, 将系统环境相关的信息存储到变量里，减少与内核交互
            会影响子进程(将自己的环境变量复制给子进程)

            输出当前shell所有环境变量
                env

            访问环境变量的值
                echo $环境变量名

            定义和修改环境变量的值
                export 环境变量名=值

            删除环境变量
                unset 环境变量名

        配置文件
            bash启动时会执行配置文件(shell脚本)
                ~/.bashrc

            当bash结束时会自动将命令历史写入~/.bash_history


        脚本功能

-------------------------------------------------------------------------------
学习编程语言的流程:
    了解准备学习的语言概述
    编程入口
    变量的使用(数据类型)
    操作符(操作变量) -> 语句
    流程控制语句(分支 循环)
    函数(代码的打包)
    数组
    类和对象
    字符串处理
    I/O文件操作
    系统编程(进程/线程/进程间通讯)
    网络编程(套接字的使用)

-------------------------------------------------------------------------------
变量
    变量默认没有数据类型之分, 一切皆于字符串

    变量命名规则:
        严格区分大小写
        数字 字母 特殊字符进行组合，但不能以数字和特殊字符开头(下划线)
        尽可能描述变量存储的值

    定义变量
        变量名=值
            =两边不能有空格
            例:
                a=123
                a="hello world"
                a=34.6778
                a=$(ls -l)      将命令执行标准输出赋值给a变量

    更新变量值
        变量名=新值

        变量名+=追加值

    获取变量值
        $变量名
            或
        ${变量名}

    删除变量
        unset 变量名

    bash Shell 变量的分类:
        普通变量
        环境变量    使用export修改变量, 会影响子进程

    ${}的特殊访问
        解决变量与其它字符串连接混乱问题

        按位置进行截取
            ${变量名:起始值:截取个数}
            ${变量名:起始值:-从后面定位结束值}

        按关键词进行截取
            ${变量名#*关键词}       截取第一个关键词后面内容
            ${变量名##*关键词}      截取最后一个关键词后面内容
            ${变量名%关键词*}       截取最后一个关键词前面内容
            ${变量名%%关键词*}      截取第一个关键词前面内容

        获取字符串长度
            ${#变量名}

        替换
            ${变量名/查找关键词/替换关键词}     替换第一个关键词
            ${变量名//查找关键词/替换关键词}    替换全部关键词

        变量默认值
            echo ${变量名-默认值}
                此变量名值为空或不存在，默认值才会使用


        练习:   截取IP地址

    source或.   内部命令, 使用本进程执行脚本, (默认情况下执行程序都开新进程)

    内置变量
        $$          代表本脚本的PID(进程标识符)
        $0          代表本脚本名
        $1          代表脚本的第一个参数
        $2          代表脚本的第二个参数
        $3          代表脚本的第三个参数
        ...
        ${10}       代表脚本的第十个参数
        ...
        $n          代表脚本的第n个参数
        $@          代表脚本的所有参数
        $*          代表脚本的所有参数
        $?          代表上一条命令执行错误码(0代表正确， 非0代表错误)

-------------------------------------------------------------------------------
输入/输出语句
    echo/printf

    printf "%d%s\n" 34 "hello"
        "%10d"      按10个空位右对齐
        "%-10d"     按10个空位左对齐
        "%010d"     按10 个空位右对齐, 前面补0
        "%10.2f"    按10个空位右对齐, 保留两位小数点
        "%*c"       按后面第一个参数指定个数来右对齐

    read
        -p      指定输入提示信息
        -s      关闭回显
        -n      指定输入最大字符个数
        -t      指定超时时间(秒)

-------------------------------------------------------------------------------
一行多条命令执行
    ;        以分号分隔多条命令顺序执行
    &&      前面命令执行成功才会执行后面命令
    ||      前面命令执行失败才会执行后面命令

-------------------------------------------------------------------------------
流程控制语句
    分支
        格式:
            if 命令; then
                命令成功要执行的代码块
            fi

            if 命令; then
                命令成功要执行的代码块
            else
                命令失败要执行的代码块
            fi

            if 命令1; then
                命令1成功要执行的代码块
            elif 命令2; then
                命令2成功要执行的代码块
            elif 命令3; then
                命令3成功要执行的代码块
            ...
            else
                命令失败要执行的代码块
            fi

        test命令(判断 条件表达式)
            test $a = $b
                或
            [ $a = $b ]
                或
            (($a == $b))
            [[ $a == $b ]]

            得到条件表达式所有帮助
                man test

            整型数据比较: -le -lt -ge -gt -ne -eq

            字符串比较: = !=

            字符串是否为空: -z

            逻辑比较: -a -o !
                ! 后面要跟空格

            文件类型比较: -e -d -f -L -p -b ...


            对变量最好使用双引号引起来， 保护起来， 以免报语法错误


        case(处理菜单使用, 多路匹配)
            格式:
                case "$num" in
                    1) echo "A";;
                    2) echo "B";;
                    3) echo "C";;
                    *) echo "Other";;
                esac

    循环
        while
            格式:
                while 命令(条件表达式); do
                    循环代码块
                done

                命令成功或条件表达式为真才会执行循环体

        until
            格式:
                until 命令(条件表达式); do
                    循环代码块
                done

                命令失败或条件表达式为假才会执行循环体

        for
            格式:
                for 迭代变量 in 迭代对象 ; do
                    循环代码块
                done

                迭代对象是以空格为分隔符序列

                for i in 1 2 3 4 5 6 7 8 9 10; do
                    echo $i
                done

                for i in 1 2.334 "hello" "1.txt" 5 678.45 7 8 9 10; do
                    echo $i
                done

        循环控制语句
            break           退出循环
            continue        跳过本次循环

-------------------------------------------------------------------------------
代码规范(可读性)

    加空行      使代码具有段落感
        if/while/for/until/case/select 之间加空行
        函数之间加空行
        按代码功能分段加空行

    缩进对齐    使代码具有层次感
        缩进量为4个空格, 遇到if/while/for/until/case/select语句，里面内容进行缩进对齐

    加空格      使代码更清晰
        双目操作符两边加空格(有左值右值的操作符)

    命名规则    尽量能描述存储数据或功能
        首字母小写驼峰法    gameStatus      inputNum
        首字母大写驼峰法    GameStatus      InputNum
        下划线连接          game_status     input_num

        不建议使用中文和拼音

    折行        一行不要超过80个字符(包含空白字符)
        使用 \ 进行连接行, \后不能跟任何字符

-------------------------------------------------------------------------------
函数    打包代码

函数定义格式:
    [function] 函数名() {
        函数代码块
    }

函数调用格式:
    函数名 [参数]...

函数就是命令，与命令用法一样
exit和return后面接的必须是0-255的数字

-------------------------------------------------------------------------------
数组
    与变量一样是存储数据
    批量操作同类型的数据
    SHELL只支持一维数组
    数组不能直接作为函数参数进行传递

   定义(索引数组)
        数组名=(值1 值2 值3...)

        数组名[键]=值

    访问
        访问指定元素
            echo ${数组名[下标]}
                下标是正整数, 从0开始描述数组的第几个元素

        访问所有元素
            echo ${数组名[*]}
            echo ${数组名[@]}

        访问数组长度
            ${#数组名[*]}

        访问键值对数组所有键名
            ${!数组名[*]}

    更新
        更新数组的指定元素
            数组名[下标]=新值

            数组名+=(追加值1 追加值2...)

    删除
        删除数组指定元素
            unset 数组名[下标]

            只是对应下标元素清空值, 并不会改变数组其它元素的位置

        删除整个数组
            unset 数组名

-------------------------------------------------------------------------------
declare

    定义只读变量(常量)
        declare -r 只读变量名=值

    定义索引数组
        declare -a 数组名

    定义键值对数组
        declare -A 数组名

    定义自动转化大写的变量
        declare -u 变量名
            给此变量名赋值，会自动转成大写

    定义自动转化小写的变量
        declare -l 变量名
            给此变量名赋值，会自动转成小写

    定义环境变量
        declare -x 环境变量名

-------------------------------------------------------------------------------
变量作用域
    $* 和 $@的区别: 它们的区别在于使用双引号, $*代表一个元素， $@代表多个元素

    函数直接可以访问和修改函数外的变量
    shell里的变量都是全局变量, 在函数里定义的变量在函数调用后也可以直接访问

    在函数内可以使用local关键词定义局部变量 (只能在函数中使用)

-------------------------------------------------------------------------------
查找命令

    which                           查找$PATH变量指定的目录里的命令

        which ifconfig              查出ifconfig命令的路径

    whereis                         查找命令，显示命令更多的信息

        whereis ifconfig            命令路径，帮助文档等

    locate                          文件查找命令

        速度快，通过系统自带的一个数据库去查找

            /var/lib/mlocate/mlocate.db

        locate hello                查找带hello的文件,如果hello是刚刚新建的就找不到，因为数据库还没有没保存现在的信息

        updatedb                    手动更新查找数据库，然后再查找就会很快找到刚刚新建的hello文件


    find                            文件查找命令，功能最强大，速度慢，因为会扫描整个硬盘

        find /etc -name grub.conf   查找/etc目录下的grub.conf文件

        find / -name "*.conf"       查找/下所有.conf文件

        find  / -iname grub.conf    查找/目录下的grub.conf文件，忽略大小写

        find / -maxdepth 2 -name grub.conf     可以使用-maxdepath参数来控制查找的层次，就是说只查当前目录和子目录,最多查2级目录
        find / -mindepth 2 -name grub.conf     最少查二级目录

        find /etc -type d           查找/etc/下所有的目录

        find /etc -type f           查找/etc/下的所有普通文件

        find /etc -type l -name *.conf      查找/etc/下软链接文件是.conf结尾的文件

        find /etc -type s           查找/etc/下所有socket文件

        find /etc -type c           查找/etc/下的所有字符设备文件

        find /etc -type p           查找/etc/下所有管道文件

        find /etc -user root        查找/etc/所属用户是root的文件

        find /etc -group root       查找/etc/所属用户组是root的文件

        find /etc -uid 500          查找/etc/下uid是500的文件,和-user类似

        find /etc -gid 500          查找/etc/下gid是500的文件,和-group类似

        find /etc -nouser           查找没有所属用户的文件

        find /etc -nogroup          查找没有所属用户组的文件

        find /etc -perm 777 -type d    查找/etc/下权限为777的目录

        find . -perm  111           查找权限是111的文件

        find . -size +10M           查找当前目录下大于10M的文件，单位可以有K,M,G,b等

        find / -size -2M            查找根目录下少于2M的文件

        find / -mtime 1             查找根目录下1小时以前修改的所有文件

        find / -mtime +2            查找根目录下2个多小时以前修改的所有文件

        find / -mtime -3            查找根目录下最近3小时内修改的所有文件

        find / -atime 1             查找根目录下1天以前访问或读过的所有文件

        find / -atime -1            查找根目录下最近1天内读过或访问的文件

        find / -ctime -3            查找根目录下最近3天内状态发生改变的文件

        find / -cmin -3             查找根目录下最近3分钟内状态发生改变的文件

        find / -empty               查找根目录下所有空白文件或者空目录

        find / -false               查找根目录下总是错误的文件

        find / -false -exec ls -l {} \;   查找根目录下总是错误的文件并且用ls -l查看

-------------------------------------------------------------------------------
文本处理工具

wc                                      统计命令

    wc -c /etc/passwd                   统计/etc/passwd文件里有多少个字符

    wc -w /etc/passwd                   统计/etc/passwd文件里有多少个单词

    wc -l /etc/passwd                   统计/etc/passwd文件里有多少行

sort                                    排序命令

    sort -f /etc/passwd                 忽略大小写排序

    sort -b /etc/passwd                 忽略最前面的空格符部分

    sort -n /etc/passwd                 按数字大小排序

    sort -u /etc/passwd                 去除重复行显示

    sort -r /etc/passwd                 反向排序

    sort -n -k5 /etc/passwd             指定第五列进行按数字大小排序

    sort -t: -n -k5 /etc/passwd         以:为分隔符指定第五列按数字大小排序

cut                                     字段截取

    cut -d: -f1 /etc/passwd             只显示第一列数据

    cut -d: -f1,2,5 /etc/passwd         只显示第一列，第二列，第五列的数据

    cut -d: -f1,2 /etc/passwd           以:为分隔符只显示第一列，第二列的数据

uniq                                    去除文件中相邻的重复行

    uniq -u /etc/passwd                 只显示没有被重复过的行

    uniq -d /etc/passwd                 只显示被重复过的行

    uniq -i /etc/passwd                 忽略大小定去除文件中相邻的重复行

    uniq -c /etc/passwd                 统计相邻重复行数

diff                                    比较文件差异

    diff -B /etc/passwd passwd          忽略空行造成的不同

tr                                      替换字符

    cat /etc/passwd | tr a b            查看/etc/passwd文件并把里面的a替换成b

    tr a-z A-Z < /etc/passwd            把/etc/passwd文件里的小写全转成大写

grep        文本查找(查找到结果打印对应行)

    格式: grep 关键词 [文件]...

    在passwd文件中查找root输出对应行内容
        grep root /etc/passwd

    在passwd文件中查找root输出对应行内容并且带行号
        grep -n root /etc/passwd

    在passwd文件中查找nfs输出结果后3行(包含查找结果行)
        grep -n -A 3 nfs /etc/passwd

    在passwd文件中查找nfs输出结果前3行
        grep -n -B 3 nfs /etc/passwd

    在passwd文件中查找nfs输出结果前3行后2行
        grep -n -A 2 -B 3 nfs /etc/passwd

    在多个文件中查找root关键词并且带颜色输出结果(文件名:行号:行内容)
        grep -n --color=auto root /etc/passwd /etc/shadow /etc/group
    /etc/gshadow

    在一个目录下所有文件查找root关键词
        grep -Rn root /etc/

    在一个目录下的所有文件查找root关键词，只输出有结果的文件路径
        grep -Rln root /etc/

    查找没有root关键词的行
        grep -v root /etc/passwd

    查找多个关键词(逻辑或的关系)
        grep -n --color=auto -e 'false' -e 'nologin' /etc/passwd

    查找单词(关键词)
        grep -w bin /etc/passwd
            bin必须是独立单词，不是其它单词组成部分

    忽略大小写查找
        grep -i bin /etc/passwd

    关闭输出查找(用于shell判断使用)
        grep -q root /etc/passwd

    使用扩展正则表达式(egrep)
        grep -E 'a+' /etc/passwd
            或
        egrep 'a+' /etc/passwd

basename $(pwd)      取得当前目录名

dirname $(pwd)       取得当前路径，不包含当前目录名

tac                 倒转文件里的内容

rev                 倒转文件里的单词顺序

-------------------------------------------------------------------------------
正则表达式 (字符串匹配 模糊匹配)
    需求:
        查找有线网卡设备名
            ifconfig | sed -rn 's/^(e[0-9a-zA-Z]+).*$/\1/p'

        检测用户输入必须是数字/字母/电子邮箱/手机号码
            egrep -q '^[0-9]+$' <<< $userInput
            egrep -q '^[a-zA-Z]+$' <<< $userInput
            egrep -q '^[a-zA-Z0-9]+@[a-zA-Z0-9]+\.[a-zA-Z]+$' <<< $userInput
            egrep -q '1[3-8][0-9]{9}' <<< $userInput

    .           代表任意一个字符
        r...    代表r开头的任意四个字符

    \<root      代表root开头的单词
    root\>      代表root结尾的单词
    \<root\>    代表完全匹配root单词

    ^           代表行开头
        ^root   代表以root开头的行
    $           代表行结尾
        root$   代表以root结尾的行

    *           匹配前一个字符0次或n次
        a*      匹配0个a到多个a
    +           匹配前一个字符1次或n次(至少要有一个)
        a+      匹配至少一个a
    ?           匹配前一个字符0次或1次
        a?      匹配一个a或没有a
    {}          匹配前一个字符指定次数
        a{1}    匹配一个a
        a{0,1}  与a?功能相同
        a{0,}   与a*功能相同
        a{1,}   与a+功能相同
        a{1,3}  匹配一个a 或 二个a 或三个a

    []   字符类       匹配一个字符
        [abc]           匹配这个字符必须是a或b或c
        [^abc]          匹配这个字符不是abc的其它任意字符
        [a-z]           匹配26个小写字母
        [0-9]           匹配0到9个字符
        [a-zA-Z0-9_]    匹配数字 大小写字母和下划线
        [a-zA-Z]+       匹配单词
        [^a-zA-Z]+      匹配单词分隔符

        预定义字符类
            [[:alnum:]]     字母和数字的组合，相当于[a-zA-Z0-9]
            [[:digit:]]     十进制数字 [0-9]
            [[:alpha:]]     字母组合 [a-zA-Z]
            [[:blank:]]     空格和制表符
            [[:punct:]]     特殊字符集合
            ...

    \           转义
        \.      取消.的特殊意义
        \n      代表换行

        \d      任意一个十进制数字 [0-9]
        \D      任意一个不是数字的字符 [^0-9]
        \s      任意一个空白字符 [ \f\n\r\t]
        \w      任意一个单词字符 [a-zA-Z0-9_]
        \W      [^a-zA-Z0-9_]

    |           代表或
        a|b     匹配a或b
        (root|kyo)    匹配root或kyo

    ()          子表达式

-------------------------------------------------------------------------------
sed     流编辑器

    格式: sed -e "表达式" [操作文件]...

    选项:
        -e          表达式
        -n          取消文件输出
        -i          操作原文件
        -r          支持更多正则表达式

        ()      域, 匹配子表达式，用于替换引用
            第一个小括号对应\1来引用
            第二个小括号对应\2来引用
            ...
            以此类推

            有-r参数， 小括号不需要转义, 没有-r参数需要转义 \(...\)

    输出    p

        输出第3行内容
            sed -n '3p' /etc/passwd

        输出第3行和第7行内容
            sed -n '3p;7p' /etc/passwd

        输出第3行到第5行和第7行内容
            sed -n '3,5p;7p' /etc/passwd

        输出有root关键词的行
            sed -n '/root/p' /etc/passwd

        输出以root开头的行
            sed -n '/^root/p' /etc/passwd

        输出有数字的行
            sed -n '/[0-9]/p' /etc/passwd

    删除    d

        删除第3行
            sed '3d' mypasswd

        删除第3行, 影响原文件
            sed -i '3d' mypasswd

        ...

    替换    s

        将每行的第一个root替换成kyo
            sed -e 's/root/kyo/' mypasswd

        将每行的第二个root替换成kyo
            sed -e 's/root/kyo/2' mypasswd

        将每行的所有root替换成kyo
            sed -e 's/root/kyo/g' mypasswd

        将1到10行的所有root替换成kyo
            sed -e '1,10s/root/kyo/g' mypasswd

        将10到最后行的所有root替换成kyo
            sed -e '10,$s/root/kyo/g' mypasswd

        将10到最后行的所有小写字母替换K
            sed -e '10,$s/[a-z]/K/g' mypasswd

        删除每行中第一个字符
            sed -e "s/^.//" mypasswd

        删除每行中第二个字符
            sed -r -e "s/^(.)./\1/" mypasswd

        删除每行中第一个有效字符(非空白字符)
            sed -e "s/^([[:blank:]]*)./\1/" mypasswd

        删除每行最后一个字符
            sed -e 's/.$//' mypasswd

        删除每行倒数第二个字符
            sed -r -e 's/.(.)$/\1/' mypasswd

        删除每行第二个单词([a-zA-Z]+)
            sed -r -e 's/^([^a-zA-Z]*[a-zA-Z]+[^a-zA-Z]+)[a-zA-Z]+/\1/' mypasswd
                或
            sed -r -e 's/([a-zA-Z]+[^a-zA-Z]+)[a-zA-Z]+/\1/' mypasswd
                sed替换默认第一个匹配关键词

                或
            sed -r -e 's/[a-zA-Z]+//2' mypasswd

        删除每行倒数第二个单词([a-zA-Z]+)
        交换每行的第一个单词和最后个单词

        交换每行的第二个单词和倒数第二个单词
            sed -r -e 's/^([^a-zA-Z]*[a-zA-Z]+[^a-zA-Z]+)([a-zA-Z]+)(.*[^a-zA-Z]+)([a-zA-Z]+)([^a-zA-Z]+[a-zA-Z]+[^a-zA-Z]*)/\1\4\3\2\5/' mypasswd

    截取IP地址(一行命令)
        输出结果格式: 3.3.3.9/255.255.255.0

        LANGUAGE=en_US ifconfig $(ifconfig | sed -rn
        's/^(e[0-9a-zA-Z]+).*$/\1/p') | sed -rn "s/^.*inet
        addr:([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+).*Mask:([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+).*$/\1\/\2/p"

        LANGUAGE=en_US ifconfig $(ifconfig | sed -rn 's/^(e[0-9a-zA-Z]+).*$/\1/p') | sed -rn "s/^.*inet addr:(([0-9]+\.){3}[0-9]+).*Mask:(([0-9]+\.){3}[0-9]+).*$/\1\/\3/p"
-------------------------------------------------------------------------------
Awk

    Awk是一门编程语言，有很多版本，我们用的是GNU的gawk

        以:为分隔符打印第三列

            awk -F : '{print $3}' /etc/passwd


        以:为分隔符统计/sbin/nologin有多少个

            awk 'BEGIN{FS=":" ;count=0}{if($7 = "/sbin/nologin")count+=1}END{print count}' /etc/passwd

                BEGIN      在读记录之前执行
                END        在读完记录后再执行
                $0         代表所有记录
                $1-n       代表一个记录的第几个字段

        使用awk脚本

            #!/bin/awk

            BEGIN{
                FS=:
                count=0         定义变量
            }

            {
                if($7 == "/sbin/nologin")
                {
                    count += 1
                    print $0
                }
            }

            END{
                print "count="count
            }

            awk -f 1.awk /etc/passwd        运行上面的脚本

            FNR         当前处理到第几个文件
            NF          当前多个个字段
            NR          当前处理到第几个记录
            OFS         输入指定字段分隔符
            ORS         输出记录分隔符


        打印所有行

            awk '{ print $0 }' /etc/passwd

        打印第一列

            awk -F ":" '{print $1}' /etc/passwd

        打印第一列和第三列

            awk -F ":" '{print $1"\t"$3" welcome"}' /etc/passwd

        打印每行的最后一列

            awk -F : '{print $NF}' /etc/passwd

        打印第八行

            awk -F : '{if (NR == 8){print $0}}' /etc/passwd
            awk -F : 'NR == 8 {print $0}' /etc/passwd

        打印行总数

            awk -F : 'END{print NR}' /etc/passwd

        打印每行的字段数

            awk -F : '{print NF}' /etc/passwd

        打印最后一行的最后一列

            awk -F : 'END{print $NF}' /etc/passwd

        打印字段数大于4的行

            awk -F : 'NF > 4 {printf $0}' /etc/passwd

        打印文件里所有字段总数

            awk -F : 'BEGIN{c = 0}{c=c+NF}END{print c}' /etc/passwd

        打印uid在30~40范围内的用户名

            awk -F : '$3 >= 30 && $3 <= 40{print $1}' /etc/passwd

        打印5到56行

            awk -F : 'NR >= 5 && NR <= 56 {print $0}' /etc/passwd

        隔行删除

            awk '{if (NR % 2 == 0)print $0}' /etc/passwd

        打印每行的第一单词

            awk 'BEGIN{FS="[^A-Za-z]"}{print $1}' /etc/passwd

        打印每行的第一个和第三个单词

            awk 'BEGIN{FS="[^a-zA-Z]+"}{print $1,$3}' /etc/passwd

        打印字段数大于5个的行总数

            awk 'BEGIN{FS=":";sum=0}{NF > 5{sum=sum+1}}END{print sum}' /etc/passwd

------------------------------------------------------------------------------
NFS共享
    查看教学机NFS共享情况:
        showmount -e 3.3.3.9

    挂载教学机共享目录:
        sudo mount 3.3.3.9:/kyo /mnt

    访问共享目录(操作/mnt目录即是操作共享目录):
        cd /mnt

    取消挂载:
        sudo umount -l /mnt

-------------------------------------------------------------------------------
安装64位兼容32位的库: (才能支持在64位的系统运行32位程序)
    老版本:
        sudo apt install ia32-libs -y

    新版本:
        sudo apt install lib32ncurses5 lib32z1 -y

-------------------------------------------------------------------------------
chromium-browser vim插件安装

    sudo mount 3.3.3.9:/kyo /mnt
    cp /mnt/tools/kyo_env/chromium-vim ~/ -rfauv
    chromium-browser
    打开chromium-browser浏览器按F6输入 chrome://extensions/
        开启开发者模式
        点击加载已解压的扩展程序 -> 选择家目录的chromium-vim的目录 -> 打开

    重启浏览器 (alt + f4)
    F6定位到地址栏输入网址
        jklh        上下左右
        f           显示点击字符
        gi          定位到第一个输入框
        gt/gT       切换标签
        :           进入命令行模式
        x           关闭页面
        X           还原页面
        :help       得到帮助信息

    关机前请一定要关闭chromium-browser, 否则会因为这个浏览器问题导致图形界面挂掉了

-------------------------------------------------------------------------------
禁用鼠标程序安装
    wget -O ~/kyo_env.tar http://3.3.3.9/kyo/tools/kyo_env.tar
    cd ~
    tar -xf kyo_env.tar
    cd kyo_env
    chmod +x install.sh
    sudo ./install.sh

-------------------------------------------------------------------------------
打字练习程序安装
    随机选择文章练习
        ko rand

    添加练习文章(文件中不能有中文)
        sudo ko add menu

    指定练习文章(文件中不能有中文)
        ko menu
    -----------------------------------------------------------------------

    sudo apt install libncurses5-dev -y
    cd /tmp
    wget -O ptyping-1.0.1.tar.gz http://3.3.3.9/kyo/tools/ptyping-1.0.1.tar.gz
    tar -xf ptyping-1.0.1.tar.gz
    cd ptyping-1.0.1
    ./configure && make && sudo make install

    测试: ptyping
        使用方向键选择练习文章 -> 模式选择Line或Race

        按两次ESC退出或返回

-------------------------------------------------------------------------------
1. 打印九九乘法表

2. 完善猜数字游戏

3. 接受用户输入一个年份， 判断此年是否闰年

4. 公鸡5元一只， 母鸡3元一只，小鸡1元三只，现在打算用100块买100只鸡， 列出可能组合

5. 已知1900年的一月一号是星期一，求今年有多少个黑色星期五(每个月13号是星期五)

6. 一个循环打印直角三角形
    输入: 5
            *
          * *
        * * *
      * * * *
    * * * * *

7. 老王从2000年1月1号开始过着三天打鱼两天晒网的的日子， 输入年月日求此天在打鱼还是在晒网

8. 实现cal命令功能

9. 找出最小可用的普通用户UID
    /etc/adduser.conf
        FIRST_UID=1000

    /etc/passwd

10. 生成随机播放列表
    sort -n

11. 自动给指定目录下所有文件或目录重命名(加不重复的单字符前缀)
    a-zA-Z0-9

